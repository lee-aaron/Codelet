
<resources>
    <string name="app_name">Codelet</string>
    <string name="banner_ad_unit_id">ca-app-pub-3940256099942544/6300978111</string>
    <string name="koalified">Koalified Development</string>
    <string name="action_settings">Settings</string>
    <string name="drawer_open">Open navigation drawer</string>
    <string name="drawer_close">Close navigation drawer</string>

    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>

    <string name="hello_world">Hello World</string>
    <string name="nav_header">Java Topics</string>
    <string name="getting_started">Getting Started</string>

    <string name="info">
        Welcome to Codelet! Click on the menu in the top left to learn about Java!
    </string>

    <string name="getting_started_info">
        Java is just one of the many programming languages used in the massive world of code. This app is used to help teach Java to inexperienced users and to help understand the fundamentals of the coding language. Your efforts in reading and comprehending will lead to success. Throughout Codelet, you will find various lessons, examples, and tips on how to improve your Java programming ability.
        \n
    </string>

    <string name="getting_started_info2">
        \n
        In order to compile Java programs, there are a multitude of tools that you can use. However, one of the more popular Java IDE’s (Integrated development environment), and also one that we personally recommend, is called “Eclipse.”
        \n\nEclipse Download: https://eclipse.org/downloads/
       \n\nIf you want to follow these lessons, you should download “Eclipse,” but any other compiler should do the job.
       \nWe hope that you find great use in our lessons. Good Luck!
    </string>

    <string name="hello_world_info">Welcome to the first lesson! We hope that you are as excited as we are. Now let’s create our first project. Once you open up Eclipse or any other compiler you downloaded, you will see a workspace folder, which is simply used for storing your programs.
       \n\nOnce you have opened up Eclipse, go to File -> New -> Java Project</string>

    <string name="hello_world_info2">Then name your Project: “First” and click Finish</string>

    <string name="hello_world_info3">After you create your project, right click, go to New and create a Class called “HelloWorld”. Then click Finish.</string>

    <string name="hello_world_info4">After you create your class, you should end up with an empty file with “public class HelloWorld”. \nInside the brackets, input the lines as shown below and compile your program with the green play button on the toolbar above. \nCongratulations, you have completed your first program!</string>

    <string name="hello_world_info5">Now… Let’s go into some detail about what is going on in this program. \nThe “public class HelloWorld portion of this code basically acts as an outline for the program. This should come with the creation of a new Java class and should be left alone. \nThe “public static void main (String []args)” portion is necessary for the program to run and pretty much declares that your program is running from that class. Inside the main class, we used “System.out.println” in order to print out the words “Hello World”. These descriptions are generalized as of now but we will go into more details on syntax in the next lesson.</string>

    <string name="array"><b><u>Arrays</u></b> \n\n An array is an object that can be associated with a type or class. For example, you could have an array of ints or an array of Strings. An array contains a list of values of said associated type or class that are stored in consecutive memory location.
\n
i.e Array of int values:\n
	int example [];\n
	int [] example;\n
\n
Arrays have a limited capacity so its size must be defined:\n
	int capacity = 10;\n
	int example2 [] = new int [size]; //array that can hold 10 int values\n
\n
The size of the array is defined at run time but cannot be altered once it is defined.\n
\n
Moreover, you can initialize an array using initial values in brackets {}:\n
	String names [] = {“Jim”, “Anna”, “Jones”}; //array size 3\n
\n
If you want to obtain the length of an array, use the “arrayName.length” property. This will return the declared size of the array.
\n
If you would like to print out the length of the array “names”, you would use names.length.
\n
i.e. Length of Array “names”\n
 System.out.println(names.length);\n
names.length will return 3, because there are 3 Strings in our array.\n
\n
Because arrayName.length is a property, there are no parentheses\n
\n
<b><u>Indices</u></b>\n
Array indices being at 0 and increment by 1 for each position in the array\n
\n
i.e. Positions\n
	int myArray[] = new int [10];\n
	\n
	Indices: \n
	myArray[0], myArray[1], myArray[2], … , myArray[9] //size 10, position # 0-9\n
\n
i.e. Set variable to ‘x’ element in the array\n
	int element = arrayName [3] //4th element of array\n
\n
i.e. To assign value 3 to the last element of array a:\n
	a[a.length – 1] = 3; //length of array - 1 is the capacity since the indices begin at 0\n
\n
If there are 3 elements in the array, the indices would be: 0, 1, 2. The array capacity would be at index 2. If array.length is called, it would return 3 so you would have to subtract 1 to obtain the element in the last index.
\n \n
<b><u>Arrays and Loops</u></b>\n
Arrays and for loops go together. \n
\n
i.e.  Reading in Array Values:\n
	for(int i = 0; i<![CDATA[<]]> a.length; i++) \n
	{	\n
		System.out.print(“Enter the next array value: ”);\n
		a [i] = scan.nextInt();\n
	}\n
\n
In this example, the loops starts at index 0 and loops until it is a number less than the length of the array. Using our knowledge of array indices, the capacity of the array will be reached once the index is 1 less than the length since the index begins at 0. The loop basically keeps repeating until the capacity is reached and asking the user for an input to store into the array.
\n \n
i.e. Printing out the values of an array:\n
	for(int i = 0; i <![CDATA[<]]> a.length; i++) //same loop as above\n
	{\n
		System.out.println(a[i]);\n
	}\n
\n
This example iterates over the array and prints out the value at the array index “i”.
    </string>
    <string name="loops"><b><u>Loops</u></b>\n
In situations where blocks of code need to be executed multiple times, loops can be used. A loop basically repeats code until it reaches a certain condition.\n

\n

There are primary two basic loops: \n
While Loop - Repeats a statement or group of statements until a given condition is proven false. The condition is tested first before looping the body of the code.\n
	\n
i.e. \n
while(true){\n
...\n
}\n\n
The while loop continues to execute a block of code until our boolean “true” is disproven or told to exit the loop.\n
\n
For Loop - Executes a sequence of statements multiple times.\n
	i.e. \n
	for(int i = 0; i <![CDATA[<]]> 5; i++){\n
...\n
}	\n
\n

i.e. \n
	for(int i = 0; i <![CDATA[<]]> 5; i++){\n
System.out.println(“Hello World”);\n
}	\n
\n
Output:\n
Hello World\n
Hello World\n
Hello World\n
Hello World\n
Hello World\n
\n
The first part of the for loop defines int i and gives it the value 0. \n
The next part is the main looping statement that says the loop will continue as long as our new int i is less than 5.\n
Lastly, the third part of the loop increments i for every iteration. This means that every time the block of code is executed, i increases by 1. (After the first iteration, i = 1 and so on).\n


<b><u>Breaking out of the Loops</u></b>\n
There are several ways the these loops can be broken out of. The simplest way is using the “break” command.
\n
i.e.\n
for(int i = 0; i <![CDATA[<]]>= 5; i++){\n
if(i == 4){\n
break;\n
}\n
}	\n
\n
In this example, our loop is told to execute the block of code until it is less than or equal to 5. However, we have a condition to test within each iteration of the loop. The loop will be broken out of when our int i equals to 4.\n
A while loop can be broken out of once the condition is disproven or a break is used.
\n
i.e. \n
boolean test = true;\n
int i = 0;\n
while(test) //loops while test is true\n
{\n
	if(i == 4){\n
		test = false; // sets our condition to false (disproves it)\n
}\n
i++; //otherwise, it increments by 1\n
}\n
Our loop basically repeats the block of code while test remains true. However, when our int i increases to 4 (after each iteration of the loop), test is set to false, which discontinues the loop.

\n
 </string>
    <string name = "syntax"> <b><u>Java Syntax Rules</u></b>\n
    A Java statement may span across multiple lines. \n
    \n
    Java statements end with a semicolon “;”.\n
    \n
    A variable must be declared before first use:\n
    type name; // declares the variable to be of the specified type but no initial value\n
    type name = expression; // declares the variable and initializes it to the value of the expression\n
    class name = new class(); // constructs name to be an object of class\n
    \n
    It is OK to have multiple statements on a single line, as long as they are separated by a “;”.
    Program execution is done statement by statement, one statement at a time from top to bottom, or if there are multiple statements on one line, from left to right.\n
    \n
    Within a statement, execution of the individual pieces is not necessarily left to right. Operator precedence determines the order of operations within a statement (Think of it like PEMDAS).
    \n
    Nesting:\n
    A while, if, or for must be followed by a statement to be complete\n
    The statement can be another while, if or for, as in\n
    \n
    while(someCondition)\n
    {\n
    if(someDifferentCondition)\n
    {\n
    while(someOtherCondition)\n
    {\n
    System.out.println(“Hello!”);\n
    }\n
    }\n
    }\n\n

    Each while or if followed by its matching { and } and everything is a statement.\n

    Similar for method definitions, except a method definition cannot be nested inside another statement.\n

    The scope of a variable is the nearest { and } that contains its definition.  A variable is undefined outside its scope.\n

</string>
    <string name = "scanner"> <b><u>Scanner Class</u></b>\n
When utilizing the Scanner class, which allows for a text scanner to take inputs, you must import the Scanner Class.
\n
You can either import java.util.*; or import the scanner class directly by importing java.util.Scanner;.
\n
After importing the Scanner class, you need to define a new scanner object:\n
i.e. Scanner scan = new Scanner(System.in); //name of object is scan\n
\n
Using a Scanner basically allows you to prompt the user for inputs and set them to a certain variable.

\n
i.e. Scanner Input for int type\n
//Scanner object named scan\n
int example = scan.nextInt();\n
\n
i.e. Scanner Input for String type\n
int example2 = scan.next(); //using next only returns what comes before a space input\n
\n
	Or\n
\n
int example3 = scan.nextLine();\n
 //nextLine allows the user to input a space to input into multiple blocks of scanners\n
\n
i.e. scan.next();\n
\n
int example3 = scan.next();\n
int example4 = scan.next();\n
\n
System.out.println(example3);\n
System.out.println(example4);\n
\n
Input:\n
hi bob\n
\n
Output:\n
hi bob\n
\n
The example4 String will not be set to anything and will prompt the user again to input a value since “hi bob” will all belong to the example3 String.
\n
i.e. scan.nextLine();\n
\n
int example3 = scan.nextLine();\n
int example4 = scan.nextLine();\n
\n
System.out.println(example3);\n
System.out.println(example4);\n
\n
Input: \n
hi bob\n
\n
Output:\n
hi\n
bob\n
\n
The space in between the “hi” and “bob” separates the String into two Strings, example3 and example 4.\n
\n
Overall, the scanner is used to prompt the user to input a value that is then set to a variable for use elsewhere.
</string>
</resources>
