
<resources>
    <string name="app_name">Codelet</string>
    <string name="banner_ad_unit_id">ca-app-pub-3940256099942544/6300978111</string>
    <string name="koalified">Koalified Development</string>
    <string name="action_settings">Settings</string>
    <string name="drawer_open">Open navigation drawer</string>
    <string name="drawer_close">Close navigation drawer</string>

    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>

    <string name="hello_world">Hello World</string>
    <string name="nav_header">Java Topics</string>
    <string name="getting_started">Getting Started</string>

    <string name="info">
        Welcome to Codelet! Click on the menu in the top left to learn about Java!
    </string>

    <string name="getting_started_info">
        Java is just one of the many programming languages used in the massive world of code. This app is used to help teach Java to inexperienced users and to help understand the fundamentals of the coding language. Your efforts in reading and comprehending will lead to success. Throughout Codelet, you will find various lessons, examples, and tips on how to improve your Java programming ability.
        \n
    </string>

    <string name="getting_started_info2">
        \n
        In order to compile Java programs, there are a multitude of tools that you can use. However, one of the more popular Java IDE’s (Integrated development environment), and also one that we personally recommend, is called “Eclipse.”
        \n\nEclipse Download: https://eclipse.org/downloads/
       \n\nIf you want to follow these lessons, you should download “Eclipse,” but any other compiler should do the job.
       \nWe hope that you find great use in our lessons. Good Luck!
    </string>

    <string name="hello_world_info">Welcome to the first lesson! We hope that you are as excited as we are. Now let’s create our first project. Once you open up Eclipse or any other compiler you downloaded, you will see a workspace folder, which is simply used for storing your programs.
       \n\nOnce you have opened up Eclipse, go to File -> New -> Java Project</string>

    <string name="hello_world_info2">Then name your Project: “First” and click Finish</string>

    <string name="hello_world_info3">After you create your project, right click, go to New and create a Class called “HelloWorld”. Then click Finish.</string>

    <string name="hello_world_info4">After you create your class, you should end up with an empty file with “public class HelloWorld”. \nInside the brackets, input the lines as shown below and compile your program with the green play button on the toolbar above. \nCongratulations, you have completed your first program!</string>

    <string name="hello_world_info5">Now… Let’s go into some detail about what is going on in this program. \nThe “public class HelloWorld portion of this code basically acts as an outline for the program. This should come with the creation of a new Java class and should be left alone. \nThe “public static void main (String []args)” portion is necessary for the program to run and pretty much declares that your program is running from that class. Inside the main class, we used “System.out.println” in order to print out the words “Hello World”. These descriptions are generalized as of now but we will go into more details on syntax in the next lesson.</string>

    <string name="array"><b><u>Arrays</u></b> \n\n An array is an object that can be associated with a type or class. For example, you could have an array of ints or an array of Strings. An array contains a list of values of said associated type or class that are stored in consecutive memory location.
\n
i.e Array of int values:\n
	int example [];\n
	int [] example;\n
\n
Arrays have a limited capacity so its size must be defined:\n
	int capacity = 10;\n
	int example2 [] = new int [size]; //array that can hold 10 int values\n
\n
The size of the array is defined at run time but cannot be altered once it is defined.\n
\n
Moreover, you can initialize an array using initial values in brackets {}:\n
	String names [] = {“Jim”, “Anna”, “Jones”}; //array size 3\n
\n
If you want to obtain the length of an array, use the “arrayName.length” property. This will return the declared size of the array.
\n
If you would like to print out the length of the array “names”, you would use names.length.
\n
i.e. Length of Array “names”\n
 System.out.println(names.length);\n
names.length will return 3, because there are 3 Strings in our array.\n
\n
Because arrayName.length is a property, there are no parentheses\n
\n
<b><u>Indices</u></b>\n
Array indices being at 0 and increment by 1 for each position in the array\n
\n
i.e. Positions\n
	int myArray[] = new int [10];\n
	\n
	Indices: \n
	myArray[0], myArray[1], myArray[2], … , myArray[9] //size 10, position # 0-9\n
\n
i.e. Set variable to ‘x’ element in the array\n
	int element = arrayName [3] //4th element of array\n
\n
i.e. To assign value 3 to the last element of array a:\n
	a[a.length – 1] = 3; //length of array - 1 is the capacity since the indices begin at 0\n
\n
If there are 3 elements in the array, the indices would be: 0, 1, 2. The array capacity would be at index 2. If array.length is called, it would return 3 so you would have to subtract 1 to obtain the element in the last index.
\n \n
<b><u>Arrays and Loops</u></b>\n
Arrays and for loops go together. \n
\n
i.e.  Reading in Array Values:\n
	for(int i = 0; i<![CDATA[<]]> a.length; i++) \n
	{	\n
		System.out.print(“Enter the next array value: ”);\n
		a [i] = scan.nextInt();\n
	}\n
\n
In this example, the loops starts at index 0 and loops until it is a number less than the length of the array. Using our knowledge of array indices, the capacity of the array will be reached once the index is 1 less than the length since the index begins at 0. The loop basically keeps repeating until the capacity is reached and asking the user for an input to store into the array.
\n \n
i.e. Printing out the values of an array:\n
	for(int i = 0; i <![CDATA[<]]> a.length; i++) //same loop as above\n
	{\n
		System.out.println(a[i]);\n
	}\n
\n
This example iterates over the array and prints out the value at the array index “i”.
    </string>

</resources>
